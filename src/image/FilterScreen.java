/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package image;

import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.ImageObserver;
import static java.awt.image.ImageObserver.ALLBITS;
import java.awt.image.Kernel;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author alian
 */
public class FilterScreen extends javax.swing.JFrame {

    public static int[][] maskSobelX = {
        {-1, 0, 1},
        {-2, 0, 2},
        {-1, 0, 1}};
    public static int[][] maskLaplacian = {
        {0, 1, 0},
        {1, -4, 1},
        {0, 1, 0}};

    static BufferedImage image;
    static boolean imageLoaded = false;
    String imagePath;
    String currentImagePath = "src//image//images//output//third.png";

    /**
     * Creates new form FilterScreen
     */
    public FilterScreen(String imagePath) {
        this.imagePath = imagePath;
        initComponents();

        try {
            File f = new File(imagePath);
            BufferedImage image;
            image = ImageIO.read(f);
            writeImage(image);
            imageBoxThirdScreen.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
            Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println(this.imagePath);
        this.setLocationRelativeTo(null);
    }

    public void writeImage(BufferedImage image) throws IOException {
        File outputfile = new File(currentImagePath);
        ImageIO.write(image, "png", outputfile);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterButtonGroup = new javax.swing.ButtonGroup();
        imageBoxThirdScreen = new javax.swing.JLabel();
        declineFilter = new javax.swing.JRadioButton();
        acceptFilter = new javax.swing.JRadioButton();
        FilterCombobox = new javax.swing.JComboBox<>();
        nextButtonOnThirdScreen = new javax.swing.JButton();
        backButtonOnThirdScreen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        filterButtonGroup.add(declineFilter);
        declineFilter.setSelected(true);
        declineFilter.setText("Filtreleme uygulamak istemiyorum");
        declineFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineFilterActionPerformed(evt);
            }
        });

        filterButtonGroup.add(acceptFilter);
        acceptFilter.setText("Filtreleme uygulamak istiyorum");
        acceptFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptFilterActionPerformed(evt);
            }
        });

        FilterCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtreleme İşlemleri", "(a) Bulanıklaştırma filtresi", "(b) Keskinleştirme filtresi", "(c) Ortanca filtresi", "(d) Laplace filtresi", "(e) Kenar bulma filtresi" }));
        FilterCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterComboboxActionPerformed(evt);
            }
        });

        nextButtonOnThirdScreen.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        nextButtonOnThirdScreen.setText("İleri >");
        nextButtonOnThirdScreen.setToolTipText("");
        nextButtonOnThirdScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonOnThirdScreenActionPerformed(evt);
            }
        });

        backButtonOnThirdScreen.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        backButtonOnThirdScreen.setText("< Geri");
        backButtonOnThirdScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonOnThirdScreenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(declineFilter)
                    .addComponent(acceptFilter)
                    .addComponent(FilterCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addComponent(imageBoxThirdScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButtonOnThirdScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(nextButtonOnThirdScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imageBoxThirdScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButtonOnThirdScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButtonOnThirdScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(acceptFilter)
                .addGap(18, 18, 18)
                .addComponent(declineFilter)
                .addGap(49, 49, 49)
                .addComponent(FilterCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        if (declineFilter.isSelected()) {
            FilterCombobox.setEnabled(false);
        }

    }//GEN-LAST:event_formWindowOpened

    private void FilterComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterComboboxActionPerformed

        if (FilterCombobox.getSelectedIndex() == 1) {
            imageBoxThirdScreen.setIcon(new ImageIcon(blurImage(this.imagePath)));
            try {
                writeImage(blurImage(this.imagePath));
            } catch (IOException ex) {
                Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (FilterCombobox.getSelectedIndex() == 2) {
            BufferedImage image = sharpenImage(this.imagePath);    // TODO add your handling code here:
            imageBoxThirdScreen.setIcon(new ImageIcon(image));
            try {
                writeImage(image);
            } catch (IOException ex) {
                Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (FilterCombobox.getSelectedIndex() == 3) {
            MyImage myImage = new MyImage(800, 600);
            myImage.readImage(imagePath);
            myImage = medianFilter(myImage, 3);
            imageBoxThirdScreen.setIcon(new ImageIcon(myImage.getImage()));
            try {
                writeImage(myImage.getImage());
            } catch (IOException ex) {
                Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (FilterCombobox.getSelectedIndex() == 4) {
            try {
                BufferedImage image = ImageIO.read(new File(imagePath));
                imageBoxThirdScreen.setIcon(new ImageIcon(applyEdgeDetection(image, maskLaplacian)));
                writeImage(applyEdgeDetection(image, maskLaplacian));
            } catch (IOException ex) {
                Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (FilterCombobox.getSelectedIndex() == 5) {
            try {
                BufferedImage image = ImageIO.read(new File(imagePath));
                imageBoxThirdScreen.setIcon(new ImageIcon(applyEdgeDetection(image, maskSobelX)));
                writeImage(applyEdgeDetection(image, maskSobelX));
            } catch (IOException ex) {
                Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_FilterComboboxActionPerformed

    private void declineFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineFilterActionPerformed
        FilterCombobox.setEnabled(false);        // TODO add your handling code here:
    }//GEN-LAST:event_declineFilterActionPerformed

    private void nextButtonOnThirdScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonOnThirdScreenActionPerformed
        /* try {
            writeImage(tempImage);
        } catch (IOException ex) {
            Logger.getLogger(PreProcessScreen.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        MorphologicalOperation morphologicalOperation = new MorphologicalOperation(currentImagePath);
        morphologicalOperation.setVisible(true);
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_nextButtonOnThirdScreenActionPerformed

    private void acceptFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptFilterActionPerformed
        FilterCombobox.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_acceptFilterActionPerformed

    private void backButtonOnThirdScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonOnThirdScreenActionPerformed

        if (declineFilter.isSelected()) {

            try {
                PreProcessScreen preProcessScreen;
                preProcessScreen = new PreProcessScreen("src//image//images//output//second.png");
                preProcessScreen.setVisible(true);
                this.setVisible(false);
            } catch (IOException ex) {
                Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            try {
                PreProcessScreen preProcessScreen;
                preProcessScreen = new PreProcessScreen("src//image//images//output//third.png");
                preProcessScreen.setVisible(true);
                this.setVisible(false);
            } catch (IOException ex) {
                Logger.getLogger(FilterScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_backButtonOnThirdScreenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilterScreen("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FilterCombobox;
    private javax.swing.JRadioButton acceptFilter;
    private javax.swing.JButton backButtonOnThirdScreen;
    private javax.swing.JRadioButton declineFilter;
    private javax.swing.ButtonGroup filterButtonGroup;
    private javax.swing.JLabel imageBoxThirdScreen;
    private javax.swing.JButton nextButtonOnThirdScreen;
    // End of variables declaration//GEN-END:variables

    public BufferedImage blurImage(String imagePath) {
        ImageObserver myImageObserver = new ImageObserver() {
            public boolean imageUpdate(Image image, int flags, int x, int y, int width, int height) {
                if ((flags & ALLBITS) != 0) {
                    imageLoaded = true;
                    System.out.println("Resim yüklendi");
                    return false;
                }
                return true;
            }
        };

        Image sourceImage = Toolkit.getDefaultToolkit().getImage(imagePath);
        sourceImage.getWidth(myImageObserver);

        while (!imageLoaded) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
            }
        }

        GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice graphicsDevice = graphicsEnvironment.getDefaultScreenDevice();
        GraphicsConfiguration graphicsConfiguration = graphicsDevice.getDefaultConfiguration();

        image = graphicsConfiguration.createCompatibleImage(sourceImage.getWidth(null), sourceImage.getHeight(null), Transparency.BITMASK);

        Graphics graphics = image.createGraphics();

        graphics.drawImage(sourceImage, 0, 0, null);
        graphics.dispose();

        Kernel kernel = new Kernel(3, 3,
                new float[]{
                    1f / 9f, 1f / 9f, 1f / 9f,
                    1f / 9f, 1f / 9f, 1f / 9f,
                    1f / 9f, 1f / 9f, 1f / 9f});

        BufferedImageOp op = new ConvolveOp(kernel);
        image = op.filter(image, null);
        return image;
    }

    public BufferedImage sharpenImage(String imagePath) {
        ImageObserver myImageObserver = new ImageObserver() {
            @Override
            public boolean imageUpdate(Image image, int flags, int x, int y, int width, int height) {
                if ((flags & ALLBITS) != 0) {
                    imageLoaded = true;
                    System.out.println("Resim yüklendi");
                    return false;
                }
                return true;
            }
        };

        Image sourceImage = Toolkit.getDefaultToolkit().getImage(imagePath);
        sourceImage.getWidth(myImageObserver);

        while (!imageLoaded) {
            try {
                Thread.sleep(100);

            } catch (InterruptedException e) {
            }
        }

        GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice graphicsDevice = graphicsEnvironment.getDefaultScreenDevice();
        GraphicsConfiguration graphicsConfiguration = graphicsDevice.getDefaultConfiguration();
        image = graphicsConfiguration.createCompatibleImage(sourceImage.getWidth(null), sourceImage.getHeight(null), Transparency.BITMASK);

        Graphics graphics = image.createGraphics();

        graphics.drawImage(sourceImage, 0, 0, null);

        graphics.dispose();

        Kernel kernel = new Kernel(3, 3,
                new float[]{
                    -1, -1, -1,
                    -1, 9, -1,
                    -1, -1, -1});

        BufferedImageOp op = new ConvolveOp(kernel);

        image = op.filter(image, null);

        return image;
    }

    MyImage medianFilter(MyImage img, int maskSize) {
       
        int outputPixels[] = new int[img.getImageTotalPixels()];

        int width = img.getImageWidth();
        int height = img.getImageHeight();
        int buff[];
     
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                buff = new int[maskSize * maskSize];
                int count = 0;
                for (int r = y - (maskSize / 2); r <= y + (maskSize / 2); r++) {
                    for (int c = x - (maskSize / 2); c <= x + (maskSize / 2); c++) {
                        if (r < 0 || r >= height || c < 0 || c >= width) {//maskenin dışında kalan alan
                            continue;
                        } else {
                            buff[count] = img.getPixel(c, r);
                            count++;
                        }
                    }
                }

                java.util.Arrays.sort(buff);
                outputPixels[x + y * width] = buff[count / 2];
            }
        }
    
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                img.setPixelToValue(x, y, outputPixels[x + y * width]);//çıktı resmi 
            }
        }
        return img;
    }

    BufferedImage applyEdgeDetection(BufferedImage bi, int[][] mask) {

        bi = PointOperation.averageGrayscale(bi);

        int[][] intensities = ImageUtil.convertToMatrix(bi, ImageUtil.IntensityModel.RED);

        int[][] modifiedIntensties = applyMask(intensities, mask);

        BufferedImage modified = new BufferedImage(bi.getWidth(), bi.getHeight(), bi.getType());
        for (int i = 0; i < modified.getHeight(); i++) {
            for (int j = 0; j < modified.getWidth(); j++) {
                modified.setRGB(j, i, ImageUtil.colorToRGB(new Color(bi.getRGB(j, i)).getAlpha(),
                        modifiedIntensties[i][j],
                        modifiedIntensties[i][j],
                        modifiedIntensties[i][j]));
            }
        }
        return modified;
    }

    private static int[][] applyMask(int[][] image, int[][] mask) {
        int height = image.length;
        int width = image[0].length;
        int mid = (int) Math.floor(mask.length / 2);
        int[][] result = new int[height][width];

        int total = 0;
        for (int i = 0; i < mask.length; i++) {
            for (int j = 0; j < mask[0].length; j++) {
                total += mask[i][j];
            }
        }
        for (int i = mid; i < height - mid; i++) {
            for (int j = mid; j < width - mid; j++) {
                int value = 0;
                for (int mi = -mid; mi <= mid; mi++) {
                    for (int mj = -mid; mj <= mid; mj++) {
                        value = value + (image[i + mi][j + mj] * mask[mid + mi][mid + mj]);
                    }
                }
                result[i][j] = Math.abs(value);
            }
        }
        return result;
    }
}
